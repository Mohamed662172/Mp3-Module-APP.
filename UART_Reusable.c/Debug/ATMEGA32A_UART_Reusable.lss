
ATMEGA32A_UART_Reusable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001c8  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000072  00800060  00800060  0000025c  2**0
                  ALLOC
  3 .stab         00002100  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000766  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002ac2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000f0  00000000  00000000  00002af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000129b  00000000  00000000  00002be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003c9  00000000  00000000  00003e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000046b  00000000  00000000  00004245  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000328  00000000  00000000  000046b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009f7  00000000  00000000  000049d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000840  00000000  00000000  000053cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  00005c0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:


void Mp3Module_Init(void)
{
	/* Configure   USART During RunTime */
	USART0.BaudRate=9600;
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	USART0.EnableMode= USART_TxEnable;
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	USART0.CommunicationMode= USART_Async_DoubleSpeedMode;
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	USART0.CommunicationTerminal= USART_SingleProcessor;
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	USART0.DataFrameFormat = USART_8BitDataFrame;
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	USART0.ControlFrameFormat = USART_ParityDisable_1StopBit;
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	USART0.InterrupetSource =  USART_DisableInterrupt;
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	USART0.ReadMsg_Error =  USART_NoError;
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_13>
	/* USART  initiate */
	USART_init();
  38:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_14>
	/* Mp3   Player  OnLine */
	Mp3M0.reset();
  3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      				
	DELAY_FUN(1000);				  
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3d       	cpi	r26, 0xD2	; 210
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "DIO.h"


int main(void)
{
	Mp3M0.play(1);
  92:	e0 91 6a 00 	lds	r30, 0x006A
  96:	f0 91 6b 00 	lds	r31, 0x006B
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	09 95       	icall
  a0:	8a ea       	ldi	r24, 0xAA	; 170
  a2:	91 e1       	ldi	r25, 0x11	; 17
  a4:	a4 e0       	ldi	r26, 0x04	; 4
  a6:	b0 e0       	ldi	r27, 0x00	; 0
	DELAY_FUN(1000);
  a8:	00 00       	nop
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	a1 09       	sbc	r26, r1
  ae:	b1 09       	sbc	r27, r1
  b0:	d9 f7       	brne	.-10     	; 0xa8 <main+0x16>
  b2:	10 92 ce 00 	sts	0x00CE, r1
  b6:	10 92 cf 00 	sts	0x00CF, r1
  ba:	10 92 d0 00 	sts	0x00D0, r1
  be:	10 92 d1 00 	sts	0x00D1, r1
	Mp3M0.stop();		
  c2:	e0 91 6c 00 	lds	r30, 0x006C
  c6:	f0 91 6d 00 	lds	r31, 0x006D
  ca:	09 95       	icall
  cc:	ff cf       	rjmp	.-2      	; 0xcc <main+0x3a>

000000ce <__vector_13>:
			SET_BIT(UCSRA_Temp,U2X);
			UBRR_Temp=((float32)F_CPU)/((8.0)*USART0.BaudRate)-.5;// we add .5 to approximate the float number to avoid fixed point
		break;
   case USART_sync_Mode:
			SET_BIT(UCSRC_Temp,UMSEL);
			UBRR_Temp=((float32)F_CPU)/((2.0)*USART0.BaudRate)-.5;// we add .5 to approximate the float number to avoid fixed point
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	4f 93       	push	r20
  de:	5f 93       	push	r21
  e0:	6f 93       	push	r22
  e2:	7f 93       	push	r23
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
  f0:	e0 91 c8 00 	lds	r30, 0x00C8
					switch(USART0.CLKPolarity)
  f4:	f0 91 c9 00 	lds	r31, 0x00C9
  f8:	30 97       	sbiw	r30, 0x00	; 0
   case USART_Async_DoubleSpeedMode:
			SET_BIT(UCSRA_Temp,U2X);
			UBRR_Temp=((float32)F_CPU)/((8.0)*USART0.BaudRate)-.5;// we add .5 to approximate the float number to avoid fixed point
		break;
   case USART_sync_Mode:
			SET_BIT(UCSRC_Temp,UMSEL);
  fa:	09 f0       	breq	.+2      	; 0xfe <__vector_13+0x30>
}


void USART_init (void) {
	
	uint8	UCSRA_Temp=0;
  fc:	09 95       	icall
  fe:	ff 91       	pop	r31
	uint8	UCSRB_Temp=0;
	uint8	UCSRC_Temp=0;
	float32 UBRR_Temp =0;
 100:	ef 91       	pop	r30
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	9f 91       	pop	r25

void USART_init (void) {
	
	uint8	UCSRA_Temp=0;
	uint8	UCSRB_Temp=0;
	uint8	UCSRC_Temp=0;
 108:	8f 91       	pop	r24
}


void USART_init (void) {
	
	uint8	UCSRA_Temp=0;
 10a:	7f 91       	pop	r23
 10c:	6f 91       	pop	r22
					switch(USART0.CLKPolarity)
					{  
						case USART_SampleFallingEdge:
						break;
						case USART_SampleRisingEdge:
								SET_BIT(UCSRC_Temp,UCPOL);  
 10e:	5f 91       	pop	r21
}


void USART_init (void) {
	
	uint8	UCSRA_Temp=0;
 110:	4f 91       	pop	r20
		break;
   default:
		break;
}

switch(USART0.CommunicationTerminal)
 112:	3f 91       	pop	r19
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
{
   case USART_SingleProcessor:
		break;
   case USART_MultiProcessor:
			SET_BIT(UCSRA_Temp,MPCM);
 11a:	0f 90       	pop	r0
		break;
   default:
		break;

} 
switch(USART0.InterrupetSource)
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_15>:
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
{
	case USART_DisableInterrupt:
		break;
	case USART_TxInterruptEnable:
			SET_BIT(UCSRB_Temp,TxCIN);
 13e:	ef 93       	push	r30
		break;
 140:	ff 93       	push	r31
	case USART_RxInterruptEnable:
			SET_BIT(UCSRB_Temp,RxCIN);	
 142:	e0 91 ca 00 	lds	r30, 0x00CA
		break;
	case USART_UDREmpetyInterruptEnable:
			SET_BIT(UCSRB_Temp,UDRIE);			
 146:	f0 91 cb 00 	lds	r31, 0x00CB
		break;
	case USART_TxRxInterruptEnable:
			SET_BIT(UCSRB_Temp,TxCIN);
			SET_BIT(UCSRB_Temp,RxCIN);
 14a:	30 97       	sbiw	r30, 0x00	; 0
		break;
 14c:	09 f0       	breq	.+2      	; 0x150 <__vector_15+0x30>
	case USART_TxUDREmpetyInterruptEnable:
			SET_BIT(UCSRB_Temp,TxCIN);
			SET_BIT(UCSRB_Temp,UDRIE);
 14e:	09 95       	icall
		break;
 150:	ff 91       	pop	r31
	case USART_RxUDREmpetyInterruptEnable:
			SET_BIT(UCSRB_Temp,RxCIN);
			SET_BIT(UCSRB_Temp,UDRIE);
 152:	ef 91       	pop	r30
		break;
 154:	bf 91       	pop	r27
	case USART_TxRxUDREmpetyInterruptEnable:
			SET_BIT(UCSRB_Temp,TxCIN);
			SET_BIT(UCSRB_Temp,RxCIN);
			SET_BIT(UCSRB_Temp,UDRIE);
 156:	af 91       	pop	r26
		break; 
	default:
		break;
}

switch(USART0.DataFrameFormat)
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	7f 91       	pop	r23
 15e:	6f 91       	pop	r22
 160:	5f 91       	pop	r21
 162:	4f 91       	pop	r20
 164:	3f 91       	pop	r19
 166:	2f 91       	pop	r18
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <__vector_14>:
{
	case USART_5BitDataFrame:
			break;
	case USART_6BitDataFrame:
			SET_BIT(UCSRC_Temp,UCSZ0);
 172:	1f 92       	push	r1
			break;
 174:	0f 92       	push	r0
	case USART_7BitDataFrame:
			SET_BIT(UCSRC_Temp,UCSZ1);
 176:	0f b6       	in	r0, 0x3f	; 63
			break;
 178:	0f 92       	push	r0
	case USART_8BitDataFrame:
			SET_BIT(UCSRC_Temp,UCSZ0);
			SET_BIT(UCSRC_Temp,UCSZ1);
 17a:	11 24       	eor	r1, r1
			break;
 17c:	2f 93       	push	r18
	case USART_9BitDataFrame:
			SET_BIT(UCSRC_Temp,UCSZ0);
			SET_BIT(UCSRC_Temp,UCSZ1);
 17e:	3f 93       	push	r19
			SET_BIT(UCSRB_Temp,UCSZ2);
 180:	4f 93       	push	r20
	break;	
	default:
	break;
}	

switch(USART0.ControlFrameFormat)
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
 194:	e0 91 cc 00 	lds	r30, 0x00CC
 198:	f0 91 cd 00 	lds	r31, 0x00CD
 19c:	30 97       	sbiw	r30, 0x00	; 0
 19e:	09 f0       	breq	.+2      	; 0x1a2 <__vector_14+0x30>
{   
	case USART_ParityDisable_1StopBit:
				break;
	case USART_ParityDisable_2StopBit:
					SET_BIT(UCSRC_Temp,USBS);
 1a0:	09 95       	icall
				break;
 1a2:	ff 91       	pop	r31
	case USART_ParityEven_1StopBit:
					SET_BIT(UCSRC_Temp,UPM1);
 1a4:	ef 91       	pop	r30
				break;
 1a6:	bf 91       	pop	r27
	case USART_ParityEven_2StopBit:
					SET_BIT(UCSRC_Temp,USBS);
					SET_BIT(UCSRC_Temp,UPM1);
 1a8:	af 91       	pop	r26
				break;
 1aa:	9f 91       	pop	r25
	case USART_ParityOdd_1StopBit:
					SET_BIT(UCSRC_Temp,UPM0);
 1ac:	8f 91       	pop	r24
				break;
 1ae:	7f 91       	pop	r23
	case USART_ParityOdd_2StopBit:
					SET_BIT(UCSRC_Temp,USBS);
					SET_BIT(UCSRC_Temp,UPM1);
 1b0:	6f 91       	pop	r22
	default:
			 break;	
}

	
	UCSRB_REG = UCSRB_Temp;
 1b2:	5f 91       	pop	r21
	
	UBRRL_REG =((uint8)UBRR_Temp) ;
 1b4:	4f 91       	pop	r20
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
	
	UBRRH_REG =((uint8)UBRR_Temp)>>8 ;
 1ba:	0f 90       	pop	r0
	
	
	UCSRA_REG = UCSRA_Temp;
 1bc:	0f be       	out	0x3f, r0	; 63
	
	UCSRC_REG = UCSRC_Temp;
 1be:	0f 90       	pop	r0
	
}
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
